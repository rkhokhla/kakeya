# Docker Compose example with HMAC-SHA256 signature verification
#
# Usage:
#   docker-compose -f docker-compose.hmac.yml up
#
# This configuration demonstrates:
# - Backend verifying HMAC signatures before processing
# - Agent signing PCS with shared HMAC key
# - End-to-end signed submission flow

version: '3.8'

services:
  # Backend with HMAC signature verification
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      # Signature verification
      PCS_SIGN_ALG: hmac
      PCS_HMAC_KEY: supersecret  # CHANGE THIS IN PRODUCTION!

      # Deduplication
      DEDUP_BACKEND: redis
      REDIS_ADDR: redis:6379

      # Rate limiting
      TOKEN_RATE: 100

      # Metrics protection
      METRICS_USER: ops
      METRICS_PASS: changeme  # CHANGE THIS IN PRODUCTION!

      # WAL
      WAL_DIR: /data/wal
    volumes:
      - backend-data:/data
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Agent that signs PCS before submission
  agent:
    build:
      context: ../../agent
      dockerfile: Dockerfile
    environment:
      # Signature configuration (matches backend)
      PCS_SIGN_ALG: hmac
      PCS_HMAC_KEY: supersecret  # Must match backend key

      # Backend endpoint
      ENDPOINT: http://backend:8080/v1/pcs/submit

      # Agent configuration
      SHARD_ID: shard-001
      EPOCH: 1
      SEED: 42

      # Fault tolerance
      OUTBOX_DIR: /data/outbox
      MAX_RETRIES: 5
      BACKOFF_BASE_MS: 100
      BACKOFF_MAX_MS: 30000
    volumes:
      - agent-data:/data
    depends_on:
      - backend
    # Run once for demonstration (in production, run as cron or daemon)
    command: ["python", "-m", "agent.src.cli.build_pcs", "--in", "/data/sample.csv", "--out", "/tmp/pcs.json", "--key", "supersecret"]

  # Redis for deduplication
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    depends_on:
      - backend

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin  # CHANGE THIS IN PRODUCTION!
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ../../observability/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../../observability/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    depends_on:
      - prometheus

volumes:
  backend-data:
  agent-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  default:
    name: fractal-lba-hmac
